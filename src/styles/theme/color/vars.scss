// colors
@use 'sass:list';
@use 'sass:map';
@use 'sass:color';

@import './hct.scss';

$gray-chroma-limit: 20 !default;
$white-tone-limit: 90 !default;
$black-tone-limit: 25 !default;
$bright-color-tone-limit: 75 !default;
$invert-text-btn: false !default;

@function get-dark-colors($colors) {
  $dark-colors: ();
  @each $name, $value in $colors {
    $hct: hct_from_color($value);
    $hue: nth($hct, 1);
    $chroma: nth($hct, 2);
    $tone: nth($hct, 3);
    $alpha: color.alpha($value);
    $dark-color: null;

    @if $chroma <= $gray-chroma-limit {
      // invert black and white
      @if $tone >= $white-tone-limit or $tone <= $black-tone-limit {
        // specific rules
        @if $name == 'text-btn' and $tone >= 90 {
          @if $invert-text-btn {
            $dark-color: hcta($hue, $chroma, 100 - $tone * 0.98, $alpha);
          } @else {
            $dark-color: hcta($hue, $chroma, $tone * 0.92, $alpha);
          }
        } @else if (($name == 'shadow' or $name == 'shadow-w')) {
          @if $tone <= 10 {
            $dark-color: hcta($hue, $chroma * 0.6, $tone + 14, $alpha);
          } @else {
            $dark-color: hcta($hue, $chroma * 0.9, $tone * 0.4, $alpha);
          }
        } @else {
          // general rules
          $dark-color: hcta($hue, $chroma * 0.9, 100 - $tone * 0.98, $alpha);
        }
      } @else {
        // specifc
        @if ($name == 'bg-disabled' and $tone >= 80) {
          $dark-color: hcta($hue, $chroma * 0.8, $tone * 0.16, $alpha);
        } @else {
          // make gray color deeper
          @if $tone > 75 {
            $dark-color: hcta($hue, $chroma * 0.8, $tone * 0.4, $alpha);
          } @else {
            $dark-color: hcta($hue, $chroma * 0.8, $tone * 0.58, $alpha);
          }
        }
      }
    } @else {
      @if ($tone >= $bright-color-tone-limit) {
        $dark-color: hcta($hue, $chroma * 0.72, $tone * 0.82, $alpha);
      } @else {
        // to the colors is already dark, there is no need to make it way more darker
        $dark-color: hcta($hue, $chroma * 0.98, $tone * 0.98, $alpha);
      }
    }

    $dark-colors: map.set($dark-colors, $name, $dark-color);
  }
  @return $dark-colors;
}

$default-bg: #f8f8fa;

$default-colors: (
  primary: rgba(15, 111, 239, 0.9),
  secondary: rgba(17, 205, 239, 0.9),
  bg: $default-bg,
  bg-hover: adjust-color($default-bg, $lightness: -2.5%),
  bg-active: adjust-color($default-bg, $lightness: -3.75%),
  bg-readonly: #f0f0f3,
  bg-disabled: #dadadc,
  text: #202426,
  text-secondary: #909293,
  text-disabled: #a0a1a4,
  text-placeholder: #aeaeae,
  text-btn: #fdfdfe,
  text-white: #fafbfd,
  icon-fill: #a6a8a9,
  scrollbar: #c0c2c3,
  success: rgb(96, 211, 50),
  warn: rgb(243, 189, 41),
  danger: rgb(231, 63, 51),
  info: rgb(47, 124, 224),
  border: #cecdd0,
  overlay: rgba(0, 0, 0, 0.2),
  line: #eff2f3,
  shadow: #001220,
  shadow-w: #fff,
);

// static colors
$default-static-colors: (
  mask: rgba(0, 0, 0, 0.6),
);

$default-alphas: (
  primary: 100 90 85 80 75 70 60 40 30 20 18 12 10 8 6 4,
  secondary: 100 90 85 80 75 70 60 40 30 20,
  success: 80 60,
  warn: 80 60,
  danger: 80 60,
  error: 80 60,
  info: 80 60,
  shadow: 2 4 5 6 8 10 12 18 20 24 25 30 36 40,
  shadow-w: 4 5 6 8 10 20 24,
  text: 80,
  border: 80,
);

$default-lightness-adjustments: (
  primary: (
    l-6: 6%,
    d-4: -4%,
  ),
  bg: (
    bright: 4.5%,
    light: 2.5%,
    semi-light: 1.5%,
    alter: -0.75%,
    semi-dark: -2.5%,
    darker: -4%,
  ),
  border: (
    lighter: 6%,
    light: 4%,
    semi-light: 2%,
    semi-dark: -2.5%,
    dark: -4.75%,
    darker: -6%,
  ),
);

$default-dark-lightness-adjustments: (
  bg: (
    bright: 7.5%,
    light: 5.75%,
    semi-light: 4.5%,
    alter: -0.1%,
    semi-dark: -0.75%,
    darker: -1.25%,
  ),
);

// globals
$colors: () !default;
$dark-colors: () !default;
$static-colors: () !default;
$alphas: () !default;
$lightness-adjustments: () !default;
$dark-lightness-adjustments: () !default;
$enable-prefer-query: true !default;
$dark-theme-selector: 'html[theme="dark"]' !default;

@if variable-exists(static-colors) {
  $static-colors: map-merge($default-static-colors, $static-colors);
} @else {
  $static-colors: $default-static-colors;
}

// merge with user configs
@if variable-exists(colors) {
  $colors: map-merge($default-colors, $colors);
} @else {
  $colors: $default-colors;
}

$default-dark-colors: map-merge(
  get-dark-colors($colors),
  (
    overlay: rgba(255, 255, 255, 0.04),
  )
);

@if variable-exists(alphas) {
  $alphas: map-merge($default-alphas, $alphas);
} @else {
  $alphas: $default-alphas;
}

@if variable-exists(lightness-adjustments) {
  $lightness-adjustments: map.deep-merge($default-lightness-adjustments, $lightness-adjustments);
} @else {
  $lightness-adjustments: $default-lightness-adjustments;
}

@if variable-exists(dark-colors) {
  $dark-colors: map-merge($default-dark-colors, $dark-colors);
} @else {
  $dark-colors: $default-dark-colors;
}

@if variable-exists(dark-lightness-adjustments) {
  $dark-lightness-adjustments: map.deep-merge(
    $default-dark-lightness-adjustments,
    $dark-lightness-adjustments
  );
} @else {
  $dark-lightness-adjustments: $default-dark-lightness-adjustments;
}

$colors: map-merge($colors, $static-colors);
$dark-colors: map-merge($dark-colors, $static-colors);
$dark-lightness-adjustments: map.deep-merge($lightness-adjustments, $dark-lightness-adjustments);
